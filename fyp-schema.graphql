# Welcome to AWS AppSync!
#
# Use this editor to define the structure of your API with the GraphQL
# schema definition language (SDL).
#
# Getting started is easy!
#
# 1. Uncomment (cmd/ctrl + /) the schema below and click save.
# 2. Click provision resources to deploy a DynamoDB table and connect it with queries.
# 3. Go to the queries tab and query DynamoDB with GraphQL.
#
schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
type Query {
  customerById(customerId: ID!): Customer!
  workerById(workerId: ID!): Worker!
  workersByCity(city: String!, speciality: WorkerSpeciality!): [Worker]!
  jobById(jobId: ID!): JobRequest!
  offerById(offerId: ID!): Offer!
  jobsByCustomerId(customerId: ID!): [JobRequest]!
  jobsByCityAndSpecialityId(
    city: String!
    speciality: WorkerSpeciality
  ): [JobRequest]!
  offersByCustomerId(customerId: ID): [Offer]!
  jobsByWorkerId(workerId: ID!): [JobRequest]!
  jobsToWorkerByCustomerId(customerId: ID!): [JobRequestToWorker]!
  jobsToWorkerByWorkerId(workerId: ID!): [JobRequestToWorker]!
  offersByWorkerId(workerId: ID!): [Offer]!
}
type Mutation {
  createCustomer(createCustomerInput: CreateCustomerInput!): Customer!
  createWorker(createWorkerInput: CreateWorkerInput!): Worker!
  createJobRequest(createJobRequestInput: CreateJobRequestInput!): JobRequest!
  createJobRequestToWorker(
    createJobRequestToWorkerInput: CreateJobRequestToWorkerInput!
  ): JobRequestToWorker!
  createOffer(createOfferInput: CreateOfferInput!): Offer!

  updateCustomer(updateCustomerInput: UpdateCustomerInput!): Customer!
  updateWorker(updateWorkerInput: UpdateWorkerInput!): Worker!
  updateJobRequest(updateJobRequestInput: UpdateJobRequestInput!): JobRequest!
  updateJobRequestToWorker(
    updateJobReqestToWorkerInput: UpdateJobRequestToWorkerInput!
  ): JobRequestToWorker!
  updateOffer(updateOfferInput: UpdateOfferInput!): Offer!

  deleteCustomer(id: ID!): Customer!
  deleteWorker(id: ID!): Worker!
  deleteJobRequest(id: ID!): JobRequest!
  deleteOffer(id: ID!): Offer!
}

type Subscription {
  onJobCreated(city: String!): JobRequest
    @aws_subscribe(mutations: ["createJobRequest"])
}

type Post {
  id: ID!
  title: String!
}

type Customer {
  id: ID!
  fName: String!
  lName: String!
  email: String!
  phoneNo: String!
  postalZipCode: String
  jobRequests: [JobRequest]!
  appointments: [Appointment]
}

type JobRequest {
  id: ID!
  customerId: ID!
  location: Location!
  city: String!
  status: JobStatus!
  title: String!
  description: String!
  totalCost: Float!
  offers: [Offer]
  sentAt: AWSDateTime!
  completedAt: AWSDateTime
}

type JobRequestToWorker {
  id: ID!
  customerId: ID!
  location: Location!
  workerId: ID!
  status: JobStatus!
  title: String!
  description: String!
  totalCost: Float!
  sentAt: AWSDateTime!
  completedAt: AWSDateTime
}

type Location {
  id: ID!
  customerId: ID!
  lng: String!
  lat: String!
  state: String!
  city: String!
  address: String!
}
type WorkerLocation {
  id: ID!
  workerId: ID!
  lng: String!
  lat: String!
  state: String!
  city: String!
  address: String!
}

enum JobStatus {
  CREATED
  ACCEPTED
  CUSTOMER_CANCELED
  WORKER_CALNCELED
  COMPLETED
  CLIENT_DIDNT_SHOW_UP
  WORKER_DIDNT_SHOW_UP
}

type Worker {
  id: ID!
  fName: String!
  lName: String!
  email: String!
  icNo: String!
  phoneNo: String!
  speciality: WorkerSpeciality!
  hourlyRate: Float!
  city: String!
  # location: WorkerLocation!
  offers: [Offer]!
  appointments: [Appointment]
  lat: String!
  lng: String!
  isActive: Boolean!
}

enum WorkerSpeciality {
  HANDYMAN
  DRIVER
  AIRCONSPEC
  PLUMBER
}

type Offer {
  id: ID!
  customerId: ID!
  workerId: ID!
  jobId: ID!
  price: Float!
  sentAt: AWSDateTime!
  status: OfferStatus!
}

enum OfferStatus {
  SENT
  ACCEPTED
  COMPELTED
  CANCELED
}

input CreateCustomerInput {
  fName: String!
  lName: String!
  email: String!
  phoneNo: String!
  postalZipCode: String
}

type Appointment {
  id: ID!
  customerId: ID!
  workerId: ID!
  offerId: ID!
  time: AWSDateTime!
  status: String
}
enum AppointmentStatus {
  UPCOMING
  CUSTOMER_CANCELLED
  WORKER_CANCELED
  COMPLETED
  CUSTOMER_NO_SHOW_UP
  WORER_NO_SHOW_UP
}

input CreateWorkerInput {
  fName: String!
  lName: String!
  email: String!
  icNo: String!
  phoneNo: String!
  speciality: WorkerSpeciality!
  city: String!
  hourlyRate: Float!
}

input CreateJobRequestInput {
  customerId: ID!
  location: CreateLocationInput!
  status: JobStatus!
  title: String!
  city: String!
  description: String!
}
input CreateJobRequestToWorkerInput {
  customerId: ID!
  workerId: ID!
  location: CreateLocationInput!
  status: JobStatus!
  title: String!
  description: String!
}

input CreateOfferInput {
  customerId: ID!
  workerId: ID!
  jobId: ID!
  price: Float!
}

input UpdateCustomerInput {
  id: ID!
  fName: String
  lName: String
  email: String
  phoneNo: String
  postalZipCode: String
}

input UpdateWorkerInput {
  id: ID!
  fName: String
  lName: String
  email: String
  icNo: Int
  phoneNo: Int
  speciality: WorkerSpeciality
  city: String
  lat: String
  lng: String
  hourlyRate: Float
  isActive: Boolean
}

input UpdateJobRequestInput {
  id: ID!
  status: JobStatus
}
input UpdateJobRequestToWorkerInput {
  id: ID!
  status: JobStatus
}

input UpdateOfferInput {
  id: ID!
  price: Float
}

input CreateLocationInput {
  customerId: ID!
  lng: String!
  lat: String!
  state: String!
  city: String!
  address: String!
}

input CreateWorkerLocationInput {
  workerId: ID!
  lng: String!
  lat: String!
  state: String!
  city: String!
  address: String!
}

input UpdateWorkerLocationInput {
  workerId: ID!
  lng: String!
  lat: String!
  state: String!
  city: String!
  address: String!
}

#
